import process from 'node:process';
import commonjs from '@rollup/plugin-commonjs';
import typescript from '@rollup/plugin-typescript';
import copy from 'rollup-plugin-copy';
import nodeResolve from '@rollup/plugin-node-resolve';

const TEST_VAULT_PLUGIN_DIR =
	'obsidian-image-optimizer-test/.obsidian/plugins/image-optimizer';
const BUILD_DIR = 'build';

/* ------------------------------------ - ----------------------------------- */

const isProduction = process.env.BUILD === 'production';
const OUT_DIR = isProduction ? BUILD_DIR : TEST_VAULT_PLUGIN_DIR;

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source, visit the plugin's github repository
*/
`;

const jsConfig = {
	input: 'src/main.ts',
	external: ['obsidian', '@codemirror/view', '@codemirror/state'],
	output: {
		dir: OUT_DIR,
		sourcemap: 'inline',
		format: 'cjs',
		sourcemapExcludeSources: isProduction,
		exports: 'default',
		banner: isProduction ? banner : undefined,
	},
	plugins: [
		nodeResolve({preferBuiltins: true}),
		typescript({
			sourceMap: !isProduction,
			inlineSources: !isProduction,
			rootDir: './src',
		}),
		commonjs(),
		copy({
			targets: [{src: 'manifest.json', dest: OUT_DIR}],
			hook: 'writeBundle',
			// Verbose: true,
			overwrite: true,
		}),
	],
};

const config = [jsConfig];
export default config;
